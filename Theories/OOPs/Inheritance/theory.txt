Inheritance:
In C++, inheritance is a process in which one object acquires all the properties and behaviors of its parent object automatically. In such way, you can reuse, extend or modify the attributes and behaviors which are defined in other class.

In C++, the class which inherits the members of another class is called derived class and the class whose members are inherited is called base class. The derived class is the specialized class for the base class.

The Syntax of Derived class:

class derived_class_name :: visibility-mode base_class_name  
{  
    // body of the derived class.  
}  

N.B: In inheritance, when a derived class object is created, the base class constructor is called first, followed by the derived class constructor.
When an object of a derived class is destroyed, the derived class destructor is called first, followed by the base class destructor. 


Modes of Inheritance in C++
Mode of inheritance controls the access level of the inherited members of the base class in the derived class. In C++, there are 3 modes of inheritance:

Public Mode: If we derive a subclass from a public base class. Then the public member of the base class will become public in the derived class and protected members of the base class will become protected in the derived class.
Protected Mode: If we derive a subclass from a Protected base class. Then both public members and protected members of the base class will become protected in the derived class.
Private Mode: If we derive a subclass from a Private base class. Then both public members and protected members of the base class will become private in the derived class. They can only be accessed by the member functions of the derived class.

Private mode is the default mode that is applied when we don’t specify any mode.

// C++ program to show that a derived class
// doesn’t inherit access to private data members.
// However, it does inherit a full parent object.
class A {
public:
    int x;

protected:
    int y;

private:
    int z;
};

class B : public A {
    // x is public
    // y is protected
    // z is not accessible from B
};

class C : protected A {
    // x is protected
    // y is protected
    // z is not accessible from C
};

class D : private A // 'private' is default for classes
{
    // x is private
    // y is private
    // z is not accessible from D
};

Types of Inheritance:

1.Single Inheritance-> In single inheritance, a derived class inherits from only one base class.
2.Multiple Inheritance-> In multiple inheritance, a derived class inherits from more than one base class.
3.Multilevel Inheritance->In multilevel inheritance, a class is derived from a class which is also derived from another class, forming a chain of inheritance.
4.Hierarchical Inheritance->In hierarchical inheritance, multiple classes are derived from a single base class.
5.Hybrid Inheritance-> Hybrid inheritance is a combination of two or more types of inheritance. It generally involves a combination of hierarchical and multiple inheritance.

N.B: When multiple or hybrid inheritance is used, a function or variable inherited from more than one base class may create ambiguity. To avoid this, the scope resolution operator (::) or virtual inheritance can be used.

